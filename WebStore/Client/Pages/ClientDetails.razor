@page "/clientdetails"
@using WebStore.Shared.Models
@inject HttpClient Http


<h3>ClientDetails</h3>
<div class="row">
    <div class="col-md-6">
        <a href="/client/add" class="btn btn-primary" role="button">Add User</a>
    </div>

    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search Client by name" @bind="SearchString" @bind:event="oninput" @onkeyup="FilterClient" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br>
@if (clientList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-sucess">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clientList)
            {
                <tr>
                    <td>@client.Id</td>
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td>
                        <a href="/client/edit/@client.Id" class="btn btn-outline-dark" role="button"></a>
                        Edit
                    </td>
                    <td>
                        <a href="/client/delete/@client.Id" class="btn btn-outline-danger" role="button"></a>
                        Delete
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    protected List<Client>? clientList = new();
    protected List<Client>? searchClientData = new();
    protected Client client = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetClient();
    }

    protected async Task GetClient()
    {
        clientList = await Http.GetFromJsonAsync<List<Client>>("api/Client");

        searchClientData = clientList;
    }

    protected void FilterClient()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            clientList = searchClientData?
            .Where(c => c.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
            .ToList();
        }
        else
        {
            clientList = searchClientData;
        }
    }

    protected void DeleteConfirm(int id)
    {
        client = clientList.FirstOrDefault(x => x.Id == id);
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        clientList = searchClientData;
    }
}
